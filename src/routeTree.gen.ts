/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TestIndexImport } from './routes/test/index'
import { Route as PrivateIndexImport } from './routes/private/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as CustomersIndexImport } from './routes/customers/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as PostsIdImport } from './routes/posts/$id'
import { Route as CustomersCreateImport } from './routes/customers/create'
import { Route as CustomersIdImport } from './routes/customers/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestIndexRoute = TestIndexImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRoute,
} as any)

const PrivateIndexRoute = PrivateIndexImport.update({
  id: '/private/',
  path: '/private/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const CustomersIndexRoute = CustomersIndexImport.update({
  id: '/customers/',
  path: '/customers/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIdRoute = PostsIdImport.update({
  id: '/posts/$id',
  path: '/posts/$id',
  getParentRoute: () => rootRoute,
} as any)

const CustomersCreateRoute = CustomersCreateImport.update({
  id: '/customers/create',
  path: '/customers/create',
  getParentRoute: () => rootRoute,
} as any)

const CustomersIdRoute = CustomersIdImport.update({
  id: '/customers/$id',
  path: '/customers/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/customers/$id': {
      id: '/customers/$id'
      path: '/customers/$id'
      fullPath: '/customers/$id'
      preLoaderRoute: typeof CustomersIdImport
      parentRoute: typeof rootRoute
    }
    '/customers/create': {
      id: '/customers/create'
      path: '/customers/create'
      fullPath: '/customers/create'
      preLoaderRoute: typeof CustomersCreateImport
      parentRoute: typeof rootRoute
    }
    '/posts/$id': {
      id: '/posts/$id'
      path: '/posts/$id'
      fullPath: '/posts/$id'
      preLoaderRoute: typeof PostsIdImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
    '/customers/': {
      id: '/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/private/': {
      id: '/private/'
      path: '/private'
      fullPath: '/private'
      preLoaderRoute: typeof PrivateIndexImport
      parentRoute: typeof rootRoute
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/customers/$id': typeof CustomersIdRoute
  '/customers/create': typeof CustomersCreateRoute
  '/posts/$id': typeof PostsIdRoute
  '/about': typeof AboutIndexRoute
  '/customers': typeof CustomersIndexRoute
  '/posts': typeof PostsIndexRoute
  '/private': typeof PrivateIndexRoute
  '/test': typeof TestIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/customers/$id': typeof CustomersIdRoute
  '/customers/create': typeof CustomersCreateRoute
  '/posts/$id': typeof PostsIdRoute
  '/about': typeof AboutIndexRoute
  '/customers': typeof CustomersIndexRoute
  '/posts': typeof PostsIndexRoute
  '/private': typeof PrivateIndexRoute
  '/test': typeof TestIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/customers/$id': typeof CustomersIdRoute
  '/customers/create': typeof CustomersCreateRoute
  '/posts/$id': typeof PostsIdRoute
  '/about/': typeof AboutIndexRoute
  '/customers/': typeof CustomersIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/private/': typeof PrivateIndexRoute
  '/test/': typeof TestIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/customers/$id'
    | '/customers/create'
    | '/posts/$id'
    | '/about'
    | '/customers'
    | '/posts'
    | '/private'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/customers/$id'
    | '/customers/create'
    | '/posts/$id'
    | '/about'
    | '/customers'
    | '/posts'
    | '/private'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/customers/$id'
    | '/customers/create'
    | '/posts/$id'
    | '/about/'
    | '/customers/'
    | '/posts/'
    | '/private/'
    | '/test/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CustomersIdRoute: typeof CustomersIdRoute
  CustomersCreateRoute: typeof CustomersCreateRoute
  PostsIdRoute: typeof PostsIdRoute
  AboutIndexRoute: typeof AboutIndexRoute
  CustomersIndexRoute: typeof CustomersIndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
  PrivateIndexRoute: typeof PrivateIndexRoute
  TestIndexRoute: typeof TestIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CustomersIdRoute: CustomersIdRoute,
  CustomersCreateRoute: CustomersCreateRoute,
  PostsIdRoute: PostsIdRoute,
  AboutIndexRoute: AboutIndexRoute,
  CustomersIndexRoute: CustomersIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
  PrivateIndexRoute: PrivateIndexRoute,
  TestIndexRoute: TestIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/customers/$id",
        "/customers/create",
        "/posts/$id",
        "/about/",
        "/customers/",
        "/posts/",
        "/private/",
        "/test/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/customers/$id": {
      "filePath": "customers/$id.tsx"
    },
    "/customers/create": {
      "filePath": "customers/create.tsx"
    },
    "/posts/$id": {
      "filePath": "posts/$id.tsx"
    },
    "/about/": {
      "filePath": "about/index.tsx"
    },
    "/customers/": {
      "filePath": "customers/index.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    },
    "/private/": {
      "filePath": "private/index.tsx"
    },
    "/test/": {
      "filePath": "test/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
